import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ArrowLeft, Calendar, ExternalLink, Loader2, Download, FileText, Sparkles } from 'lucide-react';
import { notesAPI } from '../services/api';
import AnalysisDisplay from './AnalysisDisplay';
import jsPDF from 'jspdf';

const NoteDetail = () => {
  const { noteId } = useParams();
  const navigate = useNavigate();
  const [note, setNote] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchNote();
  }, [noteId]);

  const fetchNote = async () => {
    try {
      const response = await notesAPI.getNoteById(noteId);
      if (response.data.success) {
        setNote(response.data.note);
      } else {
        setError('Note not found');
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to load note');
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  const handleDownloadPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const maxWidth = pageWidth - 2 * margin;
    let yPosition = 20;

    // Title
    doc.setFontSize(20);
    doc.setFont(undefined, 'bold');
    doc.text('SmartLens AI', margin, yPosition);
    yPosition += 8;
    
    doc.setFontSize(16);
    doc.text('Note Analysis Report', margin, yPosition);
    yPosition += 15;

    // Date
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text(`Created: ${formatDate(note.created_at)}`, margin, yPosition);
    yPosition += 20;

    // Summary
    doc.setFontSize(12);
    doc.text('Summary:', margin, yPosition);
    yPosition += 7;

    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    const summaryLines = doc.splitTextToSize(note.analysis_result?.summary || 'N/A', maxWidth);
    summaryLines.forEach(line => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(line, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 10;

    // Key Points
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Key Points:', margin, yPosition);
    yPosition += 7;

    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    note.analysis_result?.keyPoints?.forEach((point, i) => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      const pointLines = doc.splitTextToSize(`${i + 1}. ${point}`, maxWidth - 5);
      pointLines.forEach(line => {
        doc.text(line, margin + 5, yPosition);
        yPosition += 6;
      });
      yPosition += 2;
    });
    yPosition += 8;

    // Keywords
    if (yPosition > 260) {
      doc.addPage();
      yPosition = 20;
    }

    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Keywords:', margin, yPosition);
    yPosition += 7;

    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    const keywords = note.analysis_result?.keywords?.map(k => `#${k}`).join(', ') || 'N/A';
    const keywordLines = doc.splitTextToSize(keywords, maxWidth);
    keywordLines.forEach(line => {
      doc.text(line, margin, yPosition);
      yPosition += 6;
    });
    yPosition += 8;

    // Sentiment
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('Sentiment:', margin, yPosition);
    yPosition += 7;

    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text(note.analysis_result?.sentiment || 'N/A', margin, yPosition);

    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150);
      doc.text(`Generated by SmartLens AI - Page ${i} of ${pageCount}`, margin, 285);
    }

    // Save PDF
    doc.save(`smartlens-analysis-${noteId}.pdf`);
  };

  if (loading) {
    return (
      <div className="min-h-[calc(100vh-5rem)] flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-16 w-16 animate-spin text-primary-600 mx-auto mb-4" />
          <p className="text-gray-600 font-medium">Loading note details...</p>
        </div>
      </div>
    );
  }

  if (error || !note) {
    return (
      <div className="min-h-[calc(100vh-5rem)] flex items-center justify-center px-4">
        <div className="text-center">
          <div className="text-6xl mb-4">ðŸ˜•</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-3">{error || 'Note not found'}</h2>
          <button onClick={() => navigate('/dashboard')} className="btn-primary">
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-5xl mx-auto px-4 py-8">
      <button
        onClick={() => navigate('/dashboard')}
        className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 mb-8 group"
      >
        <ArrowLeft className="h-5 w-5 group-hover:-translate-x-1 transition-transform" />
        <span className="font-medium">Back to Dashboard</span>
      </button>

      <div className="card p-8 mb-8">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 pb-6 border-b-2 border-gray-100">
          <div className="flex items-center space-x-3 mb-4 md:mb-0">
            <div className="p-2 bg-gradient-to-r from-primary-500 to-blue-500 rounded-xl">
              <Calendar className="h-6 w-6 text-white" />
            </div>
            <div>
              <p className="text-sm text-gray-500 font-medium">Created on</p>
              <p className="text-gray-800 font-semibold">{formatDate(note.created_at)}</p>
            </div>
          </div>
          <div className="flex gap-3">
            {note.original_image_url && (
              <a
                href={note.original_image_url}
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center space-x-2 px-5 py-3 bg-gradient-to-r from-primary-500 to-blue-500 hover:from-primary-600 hover:to-blue-600 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200"
              >
                <ExternalLink className="h-5 w-5" />
                <span>View Original</span>
              </a>
            )}
            <button
              onClick={handleDownloadPDF}
              className="flex items-center space-x-2 px-5 py-3 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200"
            >
              <Download className="h-5 w-5" />
              <span>Download PDF</span>
            </button>
          </div>
        </div>

        <h1 className="text-3xl font-bold mb-8">
          <span className="gradient-text">Detailed Analysis</span>
        </h1>

        {note.analysis_result ? (
          <AnalysisDisplay
            analysis={note.analysis_result}
            extractedText={note.extracted_text}
          />
        ) : (
          <div className="space-y-6">
            <div className="card p-8 bg-gradient-to-br from-yellow-50 to-orange-50 border-2 border-yellow-200">
              <div className="flex items-start space-x-4">
                <div className="p-3 bg-yellow-100 rounded-xl">
                  <Sparkles className="h-8 w-8 text-yellow-600" />
                </div>
                <div className="flex-1">
                  <h3 className="text-xl font-bold text-gray-900 mb-2">AI Analysis Not Available</h3>
                  <p className="text-gray-700 mb-3">
                    This note was uploaded but AI analysis could not be completed at that time.
                  </p>
                  <div className="bg-white/60 rounded-lg p-4 border border-yellow-200">
                    <p className="text-sm text-gray-700 font-medium mb-2">ðŸ’¡ Common reasons:</p>
                    <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
                      <li>API rate limit or quota exceeded</li>
                      <li>Service temporarily unavailable</li>
                      <li>High traffic during upload</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div className="card p-6">
              <div className="flex items-center space-x-3 mb-4">
                <div className="p-2 bg-gradient-to-r from-primary-500 to-blue-500 rounded-xl">
                  <FileText className="h-5 w-5 text-white" />
                </div>
                <h3 className="text-xl font-bold text-gray-900">Extracted Text</h3>
              </div>
              <div className="bg-gradient-to-br from-gray-50 to-blue-50 rounded-xl p-5 max-h-96 overflow-y-auto border-2 border-gray-100">
                <p className="text-sm text-gray-700 whitespace-pre-wrap leading-relaxed">
                  {note.extracted_text}
                </p>
              </div>
              <div className="mt-3 flex items-center space-x-2">
                <div className="px-3 py-1 bg-primary-100 text-primary-700 rounded-full text-xs font-semibold">
                  {note.extracted_text.length} characters
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default NoteDetail;
